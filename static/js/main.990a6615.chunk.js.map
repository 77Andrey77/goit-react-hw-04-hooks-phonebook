{"version":3,"sources":["components/Form/Form.js","components/ContactList/ContactList.js","components/Filter/Filter.js","components/Notification/Notification.js","components/App/App.js","reportWebVitals.js","index.js"],"names":["Form","onSubmit","useState","name","setName","number","setNumber","handleChange","event","target","value","className","id","preventDefault","type","onChange","placeholder","ContactList","contacts","onDeleteContact","map","onClick","Filter","Notification","message","shortid","require","App","JSON","parse","window","localStorage","getItem","setContacts","filter","setFilter","useEffect","setItem","stringify","contact","generate","isNameContacts","find","toLowerCase","isNumberContacts","alert","prevContacts","length","currentTarget","normalizedFilter","includes","visibleContacts","contactId","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.990a6615.chunk.js","sourcesContent":["import { useState } from 'react';\nimport PropTypes from 'prop-types';\nimport '../Form/Form.css';\n// import shortid from 'shortid';\n\nexport default function Form({ onSubmit }) {\n  const [name, setName] = useState('');\n  const [number, setNumber] = useState('');\n\n  // state = {\n  //   name: '',\n  //   number: '',\n  // };\n\n  // const nameInputId = shortid.generate();\n  // const numberInputId = shortid.generate();\n\n  const handleChange = event => {\n    // console.log(event.currentTarget.value);\n    const { name, value } = event.target;\n\n    switch (name) {\n      case 'name':\n        setName(value);\n        break;\n\n      case 'number':\n        setNumber(value);\n        break;\n\n      default:\n        return;\n    }\n  };\n\n  const handleSubmit = event => {\n    event.preventDefault();\n    // console.log(this.state);\n    onSubmit(name, number); // отправляем значения сабмита в пропс\n    setName(''); //обнуляем форму\n    setNumber('');\n  };\n\n  // const { name, number } = this.state;\n  return (\n    <div>\n      <form className=\"form\" id=\"contact\" onSubmit={handleSubmit}>\n        <label className=\"label\">\n          Name\n          <input\n            className=\"input-field\"\n            type=\"text\"\n            name=\"name\"\n            value={name}\n            onChange={handleChange}\n            // id={nameInputId}\n            placeholder=\"John Dows\"\n          />\n        </label>\n        <br />\n        <label>\n          Phone number\n          <input\n            className=\"input-field\"\n            type=\"text\"\n            name=\"number\"\n            value={number}\n            onChange={handleChange}\n            // id={numberInputId}\n            placeholder=\"459-12-56\"\n          />\n        </label>\n\n        <button type=\"submit\" className=\"submit-button\">\n          Add contact\n        </button>\n      </form>\n    </div>\n  );\n}\n\nForm.propTypes = {\n  onSubmit: PropTypes.func.isRequired,\n};\n","import PropTypes from 'prop-types';\nimport '../ContactList/ContactList.css';\n\nfunction ContactList({ contacts, onDeleteContact }) {\n    return (\n        <ul>\n            {contacts.map(({ id, name, number }) => (\n                <li className=\"contactItem\" key={id}>\n                    <p className=\"item\">\n                        {name} : {number}\n                    </p>\n                    <button\n                        className=\"button\"\n                        type=\"button\"\n                        onClick={() => onDeleteContact(id)}\n                    >\n                        Delete\n                    </button>\n                </li>\n            ))}\n        </ul>\n    );\n}\nContactList.propTypes = {\n    contacts: PropTypes.arrayOf(\n        PropTypes.shape({\n            id: PropTypes.string.isRequired,\n            name: PropTypes.string.isRequired,\n            number: PropTypes.string.isRequired,\n        }).isRequired,\n    ).isRequired,\n    onDeleteContact: PropTypes.func.isRequired,\n};\nexport default ContactList;\n","import PropTypes from 'prop-types';\n\nexport default function Filter({ value, onChange }) {\n    return (\n        <label>\n            Find contacts by name\n            <input type=\"text\" value={value} onChange={onChange} />\n        </label>\n    );\n}\nFilter.propTypes = {\n    value: PropTypes.string.isRequired,\n    onChange: PropTypes.func.isRequired,\n};\n","import PropTypes from 'prop-types';\nimport '../Notification/Notification.css';\n\nconst Notification = ({ message }) => {\n    return <p className=\"message\">{message}</p>;\n};\n\nNotification.propTypes = {\n    message: PropTypes.string.isRequired,\n};\nexport default Notification;\n","import { useState, useEffect } from 'react';\n\nimport Form from '../Form/Form';\nimport ContactList from '../ContactList/ContactList';\nimport Filter from '../Filter/Filter';\nimport Notification from '../Notification/Notification';\nimport '../App/App.css';\nconst shortid = require('shortid');\n\nexport default function App() {\n  const [contacts, setContacts] = useState(() => {\n    return JSON.parse(window.localStorage.getItem('contacts')) ?? [];\n  });\n  const [filter, setFilter] = useState('');\n  ///////////////////////////////////////////\n  useEffect(() => {\n    window.localStorage.setItem('contacts', JSON.stringify(contacts));\n  }, [contacts]);\n\n  //////////////////////////////////////////\n  const addContact = (name, number) => {\n    const contact = {\n      id: shortid.generate(),\n      name,\n      number,\n    };\n\n    const isNameContacts = contacts.find(\n      contact => contact.name.toLowerCase() === name.toLowerCase(),\n    );\n\n    const isNumberContacts = contacts.find(\n      contact => contact.number === number,\n    );\n\n    isNameContacts || isNumberContacts\n      ? alert(`${name}or ${number} is already in contacts`)\n      : setContacts(prevContacts => [contact, ...prevContacts]);\n\n    // if (isNameContacts) {\n    //   alert(`${name} is already in contacts`);\n    // } else if (name.trim() === '' || number.trim() === '') {\n    //   alert('You cannot add such a name and number');\n    // } else if (isNumberContacts) {\n    //   alert(`${number} is alread in contacts`);\n    // } else {\n    //   const contact = {\n    //     id: shortid.generate(),\n    //     name,\n    //     number,\n    //   };\n    //   //распыляет в массив\n    //   setContacts([contact, ...contacts]);\n    // }\n  };\n\n  /////////////////////////////\n  const onChangeFilter = event => {\n    setFilter(event.currentTarget.value);\n  };\n  /////////////////////////////////////\n  const visibleContacts = () => {\n    // const { filter, contacts } = this.state;\n    const normalizedFilter = filter.toLowerCase();\n\n    return contacts.filter(({ name }) =>\n      name.toLowerCase().includes(normalizedFilter),\n    );\n  };\n  //////////////////////////////////удаление контактов\n  const deleteContact = contactId => {\n    setContacts(contacts.filter(({ id }) => id !== contactId));\n  };\n\n  return (\n    <div className=\"container\">\n      <h1 className=\"title\">Phonebook</h1>\n      <Form onSubmit={addContact} />\n\n      <h2 className=\"title\">Contacts</h2>\n      {contacts.length > 0 ? (\n        <Filter value={filter} onChange={onChangeFilter} />\n      ) : (\n        <Notification message=\"You have no contacts !!\" />\n      )}\n      <ContactList\n        contacts={visibleContacts()}\n        onDeleteContact={deleteContact}\n      />\n    </div>\n  );\n}\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './components/App/App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root'),\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}